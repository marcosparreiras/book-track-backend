name: CICD

on: [push, workflow_dispatch]

jobs:
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup NodeJs
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run domain layer tests
        run: npm run test:domain

      - name: Run http layer tests
        run: npm run test:http

      - name: Set up PostgreSQL
        uses: docker://postgres
        id: postgres
        env:
          POSTGRES_USER: admin
          POSTGRES_DB: booktrack
          POSTGRES_PASSWORD: admin
        with:
          args: >
            -p 5432:5432
            -v ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
            --health-cmd "pg_isready -U admin"
            --health-interval 5s
            --health-timeout 5s
            --health-retries 3

      - name: Run integrations tests
        run: npm run test:integration

  build-and-push:
    name: Build project image and push to a registry
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate commit tag
        id: generate_commit_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "::set-output name=sha::$SHA"

      - name: Login into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push docker image on Docker Hub
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: marcosparreiras/booktrack:${{ steps.generate_commit_tag.outputs.sha }},marcosparreiras/seidor-teste-app:latest

  deploy:
    name: Deploy the new image on ecs service
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Force ECS redeploy
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --force-new-deployment
